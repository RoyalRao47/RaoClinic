// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RaoClinicAPI.Database;

#nullable disable

namespace RaoClinicAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241014101935_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RaoClinicAPI.DbTable.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentID")
                        .HasName("PK_Appointment");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("AppointmentID"), false);

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorAvailability", b =>
                {
                    b.Property<int>("AvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityID"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AvailabilityID")
                        .HasName("PK_DoctorAvailability");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("AvailabilityID"), false);

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorAvailability", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorDocument", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentID")
                        .HasName("PK_DoctorDocument");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DocumentID"), false);

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorDocument", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorProfile", b =>
                {
                    b.Property<int>("DoctorProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorProfileID"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorProfileID")
                        .HasName("PK_DoctorProfile");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DoctorProfileID"), false);

                    b.HasIndex("DoctorID")
                        .IsUnique();

                    b.ToTable("DoctorProfile", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorRating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingID")
                        .HasName("PK_DoctorRating");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RatingID"), false);

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("DoctorRating", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.OTP", b =>
                {
                    b.Property<int>("OTPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OTPID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("OTPID")
                        .HasName("PK_OTP");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("OTPID"), false);

                    b.HasIndex("PatientID");

                    b.ToTable("OTP", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.PatientProfile", b =>
                {
                    b.Property<int>("PatientProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientProfileID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("PatientProfileID")
                        .HasName("PK_PatientProfile");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PatientProfileID"), false);

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("PatientProfile", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserID")
                        .HasName("PK_User");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UserID"), false);

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.Appointment", b =>
                {
                    b.HasOne("RaoClinicAPI.DbTable.DoctorProfile", "DoctorProfile")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaoClinicAPI.DbTable.PatientProfile", "PatientProfile")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DoctorProfile");

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorAvailability", b =>
                {
                    b.HasOne("RaoClinicAPI.DbTable.DoctorProfile", "DoctorProfile")
                        .WithMany("DoctorAvailabilities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorProfile");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorDocument", b =>
                {
                    b.HasOne("RaoClinicAPI.DbTable.DoctorProfile", "DoctorProfile")
                        .WithMany("DoctorDocuments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorProfile");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorProfile", b =>
                {
                    b.HasOne("RaoClinicAPI.DbTable.User", "User")
                        .WithOne("DoctorProfile")
                        .HasForeignKey("RaoClinicAPI.DbTable.DoctorProfile", "DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorRating", b =>
                {
                    b.HasOne("RaoClinicAPI.DbTable.DoctorProfile", "DoctorProfile")
                        .WithMany("DoctorRatings")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaoClinicAPI.DbTable.PatientProfile", "Patient")
                        .WithMany("Ratings")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DoctorProfile");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.OTP", b =>
                {
                    b.HasOne("RaoClinicAPI.DbTable.PatientProfile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.PatientProfile", b =>
                {
                    b.HasOne("RaoClinicAPI.DbTable.User", "User")
                        .WithOne("PatientProfile")
                        .HasForeignKey("RaoClinicAPI.DbTable.PatientProfile", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.DoctorProfile", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorAvailabilities");

                    b.Navigation("DoctorDocuments");

                    b.Navigation("DoctorRatings");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.PatientProfile", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("RaoClinicAPI.DbTable.User", b =>
                {
                    b.Navigation("DoctorProfile")
                        .IsRequired();

                    b.Navigation("PatientProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
